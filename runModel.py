import ntpath
from optparse import OptionParser
import os
import sys
import optparse
import pandas
import csv
import numpy as np
from sklearn import preprocessing, neighbors
import pickle
 
def perf_measure(y_actual, y_hat):
    TP = 0
    FP = 0
    TN = 0
    FN = 0

    for i in range(len(y_hat)): 
        if y_actual[i]==y_hat[i]==1:
           TP += 1
    for i in range(len(y_hat)): 
        if y_hat[i]==1 and y_actual[i]!=y_hat[i]:
           FP += 1
    for i in range(len(y_hat)): 
        if y_actual[i]==y_hat[i]==0:
           TN += 1
    for i in range(len(y_hat)): 
        if y_hat[i]==0 and y_actual[i]!=y_hat[i]:
           FN += 1

    return(TP, FP, TN, FN)
 
if __name__ == '__main__':
	parser = OptionParser()
	parser.add_option("-i", "--inputfile", dest="inputfilename")
	parser.add_option("-o", "--outputfile", dest="outputfilename")
	(options, args) = parser.parse_args()

	input_file_list = options.inputfilename
	output_file_name = options.outputfilename
	
	if input_file_list != None:
		print ("start")
		opencsv = open(input_file_list)
		read = pandas.read_csv(opencsv, header=None)
		opencsv.close() 
		print ("done loading")
		df = read
		df = df.transpose()
		new_header = df.iloc[0]
		df = df[1:]
		df.columns = new_header
		
		X = np.array(df.drop(['label'],1))
		y = np.array(df['label'])
		
		y=y.astype('double')
		X=X.astype('double')
			
		loaded_model = pickle.load(open(output_file_name, 'rb'))
		print ("testing")
		result = loaded_model.predict(X)
		TP, FP, TN, FN = perf_measure(y, result)
		acc = (TP + TN)/(TP + TN + FP + FN)
		tpr = (TP)/(TP + FN)
		fpr = (FP)/(FP + TN)
		print (acc)
		print (tpr)
		print (fpr)
		print (TP)
		print (FP)
		print (TN)
		print (FN)
		np.savetxt("tmp.csv", y, delimiter=",")
		np.savetxt("tmp2.csv", result, delimiter=",")
		
		