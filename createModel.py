import ntpath
from optparse import OptionParser
import os
import sys
import optparse
import pandas
import csv
import numpy as np
from sklearn import preprocessing, cross_validation
from sklearn.neural_network import MLPClassifier
#from sklearn.neighbors import KNeighborsClassifier
#from sklearn.ensemble import RandomForestClassifier
#from sklearn.naive_bayes import GaussianNB
#from sklearn.linear_model import LinearRegression
#from sklearn.svm import SVC
#from sklearn.tree import DecisionTreeClassifier
import pickle
 
if __name__ == '__main__':
	parser = OptionParser()
	parser.add_option("-i", "--inputfile", dest="inputfilename")
	parser.add_option("-o", "--outputfile", dest="outputfilename")
	(options, args) = parser.parse_args()

	input_file_list = options.inputfilename
	output_file_name = options.outputfilename
	
	if input_file_list != None:
	
		print ("start")
		
		opencsv = open(input_file_list)
		read = pandas.read_csv(opencsv, header=None)
		opencsv.close() 
		
		print ("done loading")
		
		df = read
		df = df.transpose()
		new_header = df.iloc[0]
		df = df[1:]
		df.columns = new_header
		
		X = np.array(df.drop(['label'],1))
		y = np.array(df['label'])
		
		X = X.astype('double')
		y = y.astype('double')
		
		clf = MLPClassifier(activation='logistic', solver='sgd', hidden_layer_sizes=(3000, 2000, 1000, 500), random_state=1)
		#clf = KNeighborsClassifier()
		#clf = RandomForestClassifier(max_depth=2, random_state=0)
		#clf = GaussianNB()
		#clf = LinearRegression()
		#clf = SVC()
		#clf = DecisionTreeClassifier()
		
		print ("learning")
		
		clf.fit(X,y)

		print ("start dump")
		
		pickle.dump(clf, open(output_file_name, 'wb'))
		
		print("done")